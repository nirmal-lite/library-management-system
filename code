from tkinter import *
from tkinter import ttk
import tkinter.messagebox
import mysql.connector
from tkinter import messagebox
import tkinter
import datetime
class LibraryManagementSystem:
    def add_data(self):
        con=mysql.connector.connect(host="localhost",username="root",password="MySQL12@#",database="library")
        my_cursor=con.cursor()
        my_cursor.execute("INSERT INTO library (membertype, prnno, ID, name, address, postid, mobile, bookid, booktitle, author, dateborrowed, days, latefine, finalprice) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)", 
                (self.membertype.get(),
                    self.prnno.get(),
                    self.ID.get(), 
                    self.name.get(),
                        self.address.get(),
                        self.postid.get(),
                            self.mobile.get(), 
                            self.bookid.get(), 
                            self.booktitle.get(),
                            self.author.get(), 
                            self.dateborrowed.get(),
                                self.days.get(),
                                self.latefine.get(),
                                    self.finalprice.get()))
        con.commit()
        self.fetch_data()
        con.close()
        messagebox.showinfo("SUCCESS IN ADDING DATA")
    def fetch_data(self):
        con=mysql.connector.connect(host="localhost",username="root",password="MySQL12@#",database="library")
        my_cursor=con.cursor()
        my_cursor.execute("select * from library")
        rows=my_cursor.fetchall()

        if len(rows)!=0:
            self.libray_table.delete(*self.libray_table.get_children())
            for i in rows:

                self.libray_table.insert("",END,values=i)
            con.commit()
        con.close()        

    def get_cursor(self, event=""):
        cursor_row = self.libray_table.focus()
        content = self.libray_table.item(cursor_row)
        row = content["values"]

        if 14 == 14:
            self.membertype.set(row[0])
            self.prnno.set(row[1])
            self.ID.set(row[2])
            self.name.set(row[3])
            self.address.set(row[4])
            self.postid.set(row[5])
            self.mobile.set(row[6])
            self.bookid.set(row[7])
            self.booktitle.set(row[8])
            self.author.set(row[9])
            self.dateborrowed.set(row[10])
            self.days.set(row[11])
            self.latefine.set(row[12])
            self.finalprice.set(row[13])
        else:
            print("Error: Row data does not have 14 elements.")

    def show_data(self):
        self.txtbox.insert(END, "Member Type\t\t" + self.membertype.get() + "\n")
        self.txtbox.insert(END, "PRN No\t\t" + self.prnno.get() + "\n")
        self.txtbox.insert(END, "ID\t\t" + self.ID.get() + "\n")
        self.txtbox.insert(END, "Name\t\t" + self.name.get() + "\n")
        self.txtbox.insert(END, "Address\t\t" + self.address.get() + "\n")
        self.txtbox.insert(END, "Post ID\t\t" + self.postid.get() + "\n")
        self.txtbox.insert(END, "Mobile\t\t" + self.mobile.get() + "\n")
        self.txtbox.insert(END, "Book ID\t\t" + self.bookid.get() + "\n")
        self.txtbox.insert(END, "Book Title\t\t" + self.booktitle.get() + "\n")
        self.txtbox.insert(END, "Author\t\t" + self.author.get() + "\n")
        self.txtbox.insert(END, "Date Borrowed\t\t" + self.dateborrowed.get() + "\n")
        self.txtbox.insert(END, "Days\t\t" + self.days.get() + "\n")
        self.txtbox.insert(END, "Late Fine\t\t" + self.latefine.get() + "\n")
        self.txtbox.insert(END, "Final Price\t\t" + self.finalprice.get() + "\n")


    def reset(self):
            self.membertype.set("")
            self.prnno.set("")
            self.ID.set("")
            self.name.set("")
            self.address.set("")
            self.postid.set("")
            self.mobile.set("")
            self.bookid.set("")
            self.booktitle.set("")
            self.author.set("")
            self.dateborrowed.set("")
            self.days.set("")
            self.latefine.set("")
            self.finalprice.set("")
            self.txtbox.delete("1.0",END)

    def exiting(self):
        exit=tkinter.messagebox.askyesno("LIBRARY MANAGEMENT SYSTEM","Do you want to exit!")
        if exit:
            self.root.destroy()
            return
    def update(self):
        con=mysql.connector.connect(host="localhost",username="root",password="MySQL12@#",database="library")
        my_cursor=con.cursor()
        my_cursor.execute(
                    "UPDATE library SET membertype=%s, ID=%s, name=%s, address=%s, postid=%s, mobile=%s, bookid=%s, booktitle=%s, author=%s, dateborrowed=%s, days=%s, latefine=%s, finalprice=%s WHERE prnno=%s", 
                (
                self.membertype.get(),
                self.ID.get(),
                self.name.get(),
                self.address.get(),
                self.postid.get(),
                self.mobile.get(),
                self.bookid.get(),
                self.booktitle.get(),
                self.author.get(),
                self.dateborrowed.get(),
                self.days.get(),
                self.latefine.get(),
                self.finalprice.get(),
                self.prnno.get()
                )
            )

        con.commit()
        self.fetch_data()
        self.reset()
        con.close()
        messagebox.showinfo("SUCCESSfully updated DATA")

    def deleting(self):
        if self.prnno.get()==""  or self.ID.get()==""  :
            messagebox.showerror("error","select a member to delete ")
        else :      
                    con=mysql.connector.connect(host="localhost",username="root",password="MySQL12@#",database="library")
                    my_cursor=con.cursor()
                    my_cursor.execute("Delete from library where prnno= %s",(self.prnno.get(),)); 
                            
                    con.commit()
                    self.fetch_data()
                    self.reset()
                    con.close()
                    messagebox.showinfo("DELETED!")


    def __init__(self, root):
        self.root = root
        self.root.title("Library Management System")
        self.root.geometry("1500x800+0+0")

        lbltitle = Label(self.root, text="LIBRARY MANAGEMENT SYSTEM", bg="green", fg="blue", bd=30, relief=RIDGE, font=("Times new roman", 50, "bold"), padx=2, pady=6)
        lbltitle.pack(side=TOP, fill=X)

        # Calculate the remaining height after the title label
        remaining_height = 800 - lbltitle.winfo_reqheight() - 150  # subtracting a bit more to avoid overlap

        # Define the proportions
        prop1 = 7 / 11
        prop2 = 3 / 11
        prop3 = 2/ 12

        # Create frames with specified proportions
        frame1 = Frame(self.root, bd=12, relief=RIDGE, padx=2, bg="powder blue")
        frame1.place(x=0, y=lbltitle.winfo_reqheight(), width=1275, height=remaining_height * prop1)
        #=================================================variable======================================================
        self.membertype = StringVar()
        self.prnno = StringVar()
        self.ID = StringVar()
        self.name = StringVar()
        self.address = StringVar()
        self.postid = StringVar()
        self.mobile = StringVar()
        self.bookid = StringVar()
        self.booktitle = StringVar()
        self.author = StringVar()
        self.dateborrowed = StringVar()
        self.days = IntVar()
        self.latefine = StringVar()
        self.finalprice = StringVar()
     

        
        
        
        #=============================== for frame 1 =====================================================
        frame1_left = LabelFrame(frame1, bd=10, relief=RIDGE, padx=1,pady=2, bg="yellow",text="FILL DETAILS", font=("Arial", 10, "bold"))
        frame1_left.place(x=0, y=4, width=700, height=remaining_height * prop1-41)

        frame1_right = LabelFrame(frame1, bd=10, relief=RIDGE, padx=1,pady=2, bg="red",text="BOOKS DETAILS", font=("Arial", 10, "bold"))
        frame1_right.place(x=710, y=4, width=540, height=remaining_height * prop1-41)

        # ============================ in detail frame ================================================
        lblMemebr=Label(frame1_left, bg="powder blue", text="Member Type", font=("times new roman", 12, "bold"),padx=2, pady=6)
        lblMemebr.grid(row=0, column=0, sticky=W)
        
        comMember=ttk.Combobox(frame1_left,textvariable= self.membertype, font=("times new roman",12, "bold"), width=25, state="readonly")
        comMember ["value" ]= ("Admin Staf", "Student", "Lecturer")
        comMember.grid(row=0, column=1)

        lblPNR_NO=Label (frame1_left,bg="yellow", text="PNR_NO        ",font=("times new roman", 12, "bold"), padx=2, pady=6)
        lblPNR_NO.grid(row=1, column=0, sticky=W)
        txtPNR_No=Entry(frame1_left,font=("ariel",12),width=25, textvariable= self.prnno)
        txtPNR_No.grid(row=1,column=1)

        lblBID=Label (frame1_left,bg="yellow", text="BooK ID       ",font=("times new roman", 12, "bold"), padx=2, pady=6)
        lblBID.grid(row=0, column=2, sticky=W)
        txtBID=Entry(frame1_left,font=("ariel",12),width=25, textvariable= self.bookid)
        txtBID.grid(row=0,column=3)

        lblBname=Label (frame1_left,bg="yellow", text="Book Name    ",font=("times new roman", 12, "bold"), padx=2, pady=6)
        lblBname.grid(row=1, column=2, sticky=W)
        txtBname=Entry(frame1_left,font=("ariel",12),width=25, textvariable= self.booktitle)
        txtBname.grid(row=1,column=3)

        lblID=Label (frame1_left,bg="yellow",    text="ID            ", font=("times new roman", 12, "bold"), padx=2, pady=6)
        lblID.grid (row=2 ,column=0, sticky=W)
        lblID=Entry(frame1_left,font=("ariel",12),width=25,textvariable= self.ID)
        lblID.grid(row=2,column=1)

        lblname=Label (frame1_left,bg="yellow",  text="Name          ", font=("times new roman", 12, "bold"), padx=2, pady=6)
        lblname.grid(row=3 ,column=0, sticky=W)
        lblname=Entry(frame1_left,font=("ariel",12),width=25,textvariable= self.name)
        lblname.grid(row=3,column=1)
        
        lblAdd=Label (frame1_left,bg="yellow",   text="Address       ",font=("times new roman", 12, "bold"), padx=2, pady=6)
        lblAdd.grid(row=4 ,column=0, sticky=W)
        lblAdd=Entry(frame1_left,font=("ariel",12),width=25 ,textvariable= self.address)
        lblAdd.grid(row=4,column=1)
        
        lblPcode=Label (frame1_left,bg="yellow", text="Post Code     ", font=("times new roman", 12, "bold"), padx=2, pady=6)
        lblPcode.grid(row=5 ,column=0, sticky=W)
        lblPcode=Entry(frame1_left,font=("ariel",12),width=25,textvariable= self.postid)
        lblPcode.grid(row=5,column=1)

        lblMobile=Label (frame1_left,bg="yellow", text="mobile       ", font=("times new roman", 12, "bold"), padx=2, pady=6)
        lblMobile.grid(row=6 ,column=0, sticky=W)
        lblMobile=Entry(frame1_left,font=("ariel",12),width=25,textvariable= self.mobile)
        lblMobile.grid(row=6,column=1)
        
        #--------------------------2nd coloumn---------------
        lblAut=Label (frame1_left,bg="yellow",    text="Author        ", font=("times new roman", 12, "bold"), padx=2, pady=6)
        lblAut.grid (row=2 ,column=2, sticky=W)
        lblAut=Entry(frame1_left,font=("ariel",12),width=25,textvariable= self.author)
        lblAut.grid(row=2,column=3)

        lbldate=Label (frame1_left,bg="yellow",  text="Date Borrowed ", font=("times new roman", 12, "bold"), padx=2, pady=6)
        lbldate.grid(row=3 ,column=2, sticky=W)
        lbldate=Entry(frame1_left,font=("ariel",12),width=25,textvariable= self.dateborrowed)
        lbldate.grid(row=3,column=3)
        
        lbldays=Label (frame1_left,bg="yellow",   text="Days On Book ", font=("times new roman", 12, "bold"), padx=2, pady=6)
        lbldays.grid(row=4 ,column=2, sticky=W)
        lbldays=Entry(frame1_left,font=("ariel",12),width=25,textvariable= self.days)
        lbldays.grid(row=4,column=3)
        
        lbllate=Label (frame1_left,bg="yellow", text="Late Fine", font=("times new roman", 12, "bold"), padx=2, pady=6)
        lbllate.grid(row=5 ,column=2, sticky=W)
        lbllate=Entry(frame1_left,font=("ariel",12),width=25,textvariable= self.latefine)
        lbllate.grid(row=5,column=3)

        lblA_P=Label (frame1_left,bg="yellow", text="Actual Price   ", font=("times new roman", 12, "bold"), padx=2, pady=6)
        lblA_P.grid(row=6 ,column=2, sticky=W)
        lblA_P=Entry(frame1_left,font=("ariel",12),width=25,textvariable= self.finalprice)
        lblA_P.grid(row=6,column=3)
        # ============================ in  book  frame ================================================
        # List of 20 books
        # List of 20 books
        books = [
            "To Kill a Mockingbird",
            "1984",
            "Pride and Prejudice",
            "The Great Gatsby",
            "Moby-Dick",
            "War and Peace",
            "The Catcher in the Rye",
            "The Hobbit",
            "Crime and Punishment",
            "The Brothers Karamazov",
            "Brave New World",
            "Jane Eyre",
            "Wuthering Heights",
            "The Odyssey",
            "The Iliad",
            "One Hundred Years of Solitude",
            "Ulysses",
            "The Divine Comedy",
            "The Adventures of Huckleberry Finn",
            "The Lord of the Rings"
        ]
        
        


        lbox=Listbox(frame1_right,font=("ariel",10,"bold"),width=28,height=14)
        lbox.grid(row=0,column=0,padx=2)

        for item in books:
            lbox.insert(END,item)
        #--------------------------------------selectbox for auto fill-----------------
        def selectbox(event=""):
            print("in \n")
            value=str(lbox.get(lbox.curselection()))
            print("in \n")
            x=value
            print(x)
            current_date=datetime.datetime.today()
            print(current_date)
            if x == "To Kill a Mockingbird":
                self.bookid.set("BK1243")
                self.booktitle.set("To Kill a Mockingbird")
                self.author.set("Harper Lee")
                self.dateborrowed.set(current_date)
                self.days.set(14)  # Example duration
                self.latefine.set(0.50)  # Example late fine per day
                self.finalprice.set(20.00)  # Example price
            elif x == "1984":
                self.bookid.set("BK1244")
                self.booktitle.set("1984")
                self.author.set("George Orwell")
                self.dateborrowed.set(current_date)
                self.days.set(14)
                self.latefine.set(0.50)
                self.finalprice.set(15.00)
            elif x == "Pride and Prejudice":
                self.bookid.set("BK1245")
                self.booktitle.set("Pride and Prejudice")
                self.author.set("Jane Austen")
                self.dateborrowed.set(current_date)
                self.days.set(14)
                self.latefine.set(0.50)
                self.finalprice.set(10.00)
            elif x == "The Great Gatsby":
                self.bookid.set("BK1246")
                self.booktitle.set("The Great Gatsby")
                self.author.set("F. Scott Fitzgerald")
                self.dateborrowed.set(current_date)
                self.days.set(14)
                self.latefine.set(0.50)
                self.finalprice.set(12.00)
            elif x == "Moby-Dick":
                self.bookid.set("BK1247")
                self.booktitle.set("Moby-Dick")
                self.author.set("Herman Melville")
                self.dateborrowed.set(current_date)
                self.days.set(14)
                self.latefine.set(0.50)
                self.finalprice.set(18.00)
            elif x == "War and Peace":
                self.bookid.set("BK1248")
                self.booktitle.set("War and Peace")
                self.author.set("Leo Tolstoy")
                self.dateborrowed.set(current_date)
                self.days.set(14)
                self.latefine.set(0.50)
                self.finalprice.set(25.00)
            elif x == "The Catcher in the Rye":
                self.bookid.set("BK1249")
                self.booktitle.set("The Catcher in the Rye")
                self.author.set("J.D. Salinger")
                self.dateborrowed.set(current_date)
                self.days.set(14)
                self.latefine.set(0.50)
                self.finalprice.set(12.00)
            elif x == "The Hobbit":
                self.bookid.set("BK1250")
                self.booktitle.set("The Hobbit")
                self.author.set("J.R.R. Tolkien")
                self.dateborrowed.set(current_date)
                self.days.set(14)
                self.latefine.set(0.50)
                self.finalprice.set(20.00)
            elif x == "Crime and Punishment":
                self.bookid.set("BK1251")
                self.booktitle.set("Crime and Punishment")
                self.author.set("Fyodor Dostoevsky")
                self.dateborrowed.set(current_date)
                self.days.set(14)
                self.latefine.set(0.50)
                self.finalprice.set(15.00)
            elif x == "The Brothers Karamazov":
                self.bookid.set("BK1252")
                self.booktitle.set("The Brothers Karamazov")
                self.author.set("Fyodor Dostoevsky")
                self.dateborrowed.set(current_date)
                self.days.set(14)
                self.latefine.set(0.50)
                self.finalprice.set(18.00)
            elif x == "Brave New World":
                self.bookid.set("BK1253")
                self.booktitle.set("Brave New World")
                self.author.set("Aldous Huxley")
                self.dateborrowed.set(current_date)
                self.days.set(14)
                self.latefine.set(0.50)
                self.finalprice.set(14.00)
            elif x == "Jane Eyre":
                self.bookid.set("BK1254")
                self.booktitle.set("Jane Eyre")
                self.author.set("Charlotte Brontë")
                self.dateborrowed.set(current_date)
                self.days.set(14)
                self.latefine.set(0.50)
                self.finalprice.set(16.00)
            elif x == "Wuthering Heights":
                self.bookid.set("BK1255")
                self.booktitle.set("Wuthering Heights")
                self.author.set("Emily Brontë")
                self.dateborrowed.set(current_date)
                self.days.set(14)
                self.latefine.set(0.50)
                self.finalprice.set(14.00)
            elif x == "The Odyssey":
                self.bookid.set("BK1256")
                self.booktitle.set("The Odyssey")
                self.author.set("Homer")
                self.dateborrowed.set(current_date)
                self.days.set(14)
                self.latefine.set(0.50)
                self.finalprice.set(18.00)
            elif x == "The Iliad":
                self.bookid.set("BK1257")
                self.booktitle.set("The Iliad")
                self.author.set("Homer")
                self.dateborrowed.set(current_date)
                self.days.set(14)
                self.latefine.set(0.50)
                self.finalprice.set(18.00)
            elif x == "One Hundred Years of Solitude":
                self.bookid.set("BK1258")
                self.booktitle.set("One Hundred Years of Solitude")
                self.author.set("Gabriel Garcia Marquez")
                self.dateborrowed.set(current_date)
                self.days.set(14)
                self.latefine.set(0.50)
                self.finalprice.set(22.00)
            elif x == "Ulysses":
                self.bookid.set("BK1259")
                self.booktitle.set("Ulysses")
                self.author.set("James Joyce")
                self.dateborrowed.set(current_date)
                self.days.set(14)
                self.latefine.set(0.50)
                self.finalprice.set(20.00)
            elif x == "The Divine Comedy":
                self.bookid.set("BK1260")
                self.booktitle.set("The Divine Comedy")
                self.author.set("Dante Alighieri")
                self.dateborrowed.set(current_date)
                self.days.set(14)
                self.latefine.set(0.50)
                self.finalprice.set(25.00)
            elif x == "The Adventures of Huckleberry Finn":
                self.bookid.set("BK1261")
                self.booktitle.set("The Adventures of Huckleberry Finn")
                self.author.set("Mark Twain")
                self.dateborrowed.set(current_date)
                self.days.set(14)
                self.latefine.set(0.50)
                self.finalprice.set(14.00)
            elif x == "The Lord of the Rings":
                self.bookid.set("BK1262")
                self.booktitle.set("The Lord of the Rings")
                self.author.set("J.R.R. Tolkien")
                self.dateborrowed.set(current_date)
                self.days.set(14)
                self.latefine.set(0.50)
                self.finalprice.set(30.00)    
        #-------------------------------------------end of fuction----------------
        
        lbox.bind("<<ListboxSelect>>",selectbox)
        
        

        lscrollbar= Scrollbar(frame1_right)
        lscrollbar.grid(row=0,column=1,sticky="ns")
        lscrollbar.config(command=lbox.yview)
        self.txtbox = Text(frame1_right,font=("ariel",10,"bold"),width=40,height=15)
        self.txtbox.grid(row=0,column=2,padx=2)
        #=====================================DATA base =================================================
        frame2 = Frame(self.root, bd=12, relief=RIDGE, padx=2, bg="powder blue")
        frame2.place(x=0, y=lbltitle.winfo_reqheight() + remaining_height * prop1, width=1275, height=remaining_height * prop2)
        
        #Table_frame=Frame (frame2,bd=6,relief=RIDGE, bg="powder blue")
        #Table_frame.place(x=0,y=2,width=700,height=100)

        xscroll=ttk.Scrollbar(frame2,orient=HORIZONTAL)
        yscroll=ttk.Scrollbar(frame2,orient=VERTICAL)

        self.libray_table=ttk.Treeview(frame2, column=("memebertype", "prnno", "ID",                                                  
        "name",
        "address",
        "postid", 
        "mobile",
        "bookid",
        "booktitle",
        "author",
        "dateborrowed",
        "days", 
        "latefine",
        "finalprice"),xscrollcommand=xscroll.set,yscrollcommand=yscroll.set)

        xscroll.pack(side=BOTTOM,fill=X)
        yscroll.pack(side=RIGHT,fill=Y)
        
        xscroll.config(command=self.libray_table.xview)
        yscroll.config(command=self.libray_table.yview)
        self.libray_table.heading ("memebertype", text="Member Type")
        self.libray_table.heading ("prnno", text="PRN_NO")
        self.libray_table.heading ("ID", text="ID")
        self.libray_table.heading ("name", text="Name")
        self.libray_table.heading ("postid", text="Post Code")
        self.libray_table.heading ("address", text="Address")
        self.libray_table.heading ("mobile", text="Phone_No")
        self.libray_table.heading ("bookid", text="Book_ID")
        self.libray_table.heading ("booktitle", text="Book_Name")
        self.libray_table.heading ("author", text="Author")
        self.libray_table.heading ("dateborrowed", text="Borrowed_Date")
        self.libray_table.heading ("days", text="Days")
        self.libray_table.heading ("latefine", text="Late_Fine")
        self.libray_table.heading ("finalprice", text="Actual_Price")
        
        
        self.libray_table.column ("memebertype", width=40)
        self.libray_table.column ("prnno", width=14)
        self.libray_table.column ("ID", width=14)
        self.libray_table.column ("name", width=50)
        self.libray_table.column ("postid", width=14)
        self.libray_table.column ("address", width=40)
        self.libray_table.column ("mobile", width=14)
        self.libray_table.column ("bookid", width=14)
        self.libray_table.column ("booktitle", width=50)
        self.libray_table.column ("author", width=14)
        self.libray_table.column ("dateborrowed", width=30)
        self.libray_table.column ("days", width=14)
        self.libray_table.column ("latefine", width=14)
        self.libray_table.column ("finalprice", width=14)

        self.fetch_data()
        self.libray_table.bind("<ButtonRelease-1>",self.get_cursor)# syntax error was here 
        
        
        

       

        self.libray_table["show"]="headings"
        self.libray_table.pack(fill=BOTH,expand=1)



        
    
            #=====================================button box=================================================
        
        frame3 = Frame(self.root, bd=12, relief=RIDGE, padx=2, bg="powder blue")
        frame3.place(x=0, y=lbltitle.winfo_reqheight() + remaining_height * prop1 + remaining_height * prop2, width=1275, height=remaining_height * prop3)
        
        btn1 = Button(frame3,text="ADD DATA",command=self.add_data, font=("Warlpiri",16,"bold"),height=1,width=14,bg="gray",fg="black")
        btn1.grid(row=0,column=0,pady=8,padx=8)
        btn2 = Button(frame3,text="SHOW DATA",command=self.show_data,font=("Warlpiri",16,"bold"),height=1,width=14,bg="gray",fg="black")
        btn2.grid(row=0,column=1,padx=8)
        btn3 = Button(frame3,text="UPDATE",command=self.update,font=("Warlpiri",16,"bold"),height=1,width=14,bg="gray",fg="black")
        btn3.grid(row=0,column=2,padx=8)
        btn4 = Button(frame3,text="DELETE",command=self.deleting,font=("Warlpiri",16,"bold"),height=1,width=14,bg="gray",fg="black")
        btn4.grid(row=0,column=3,padx=8)
        btn5 = Button(frame3,text="RESET",command=self.reset,font=("Warlpiri",16,"bold"),height=1,width=14,bg="gray",fg="black")
        btn5.grid(row=0,column=4,padx=8)
        btn6 = Button(frame3,text="EXIT",command=self.exiting,font=("Warlpiri",16,"bold"),height=1,width=14,bg="gray",fg="black")
        btn6.grid(row=0,column=5,padx=8)



if __name__ == "__main__":
    root = Tk()
    obj = LibraryManagementSystem(root)
    root.mainloop()
